// Copyright (c) 2023-2024 Pierre G. Boutquin. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License").
//  You may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
namespace Boutquin.Trading.Domain.Interfaces;

using Data;

using Enums;

using ValueObjects;

/// <summary>
/// Represents the strategy for determining the position size of assets.
/// </summary>
/// <remarks>
/// The IPositionSizer interface is used to determine the number of units (shares, contracts, etc.)
/// of an asset to buy or sell based on the target capital and other factors. This helps manage risk
/// and control the allocation of capital to different assets in a strategy.
/// </remarks>
public interface IPositionSizer
{
    /// <summary>
    /// Computes the position sizes for all assets in the strategy based on the target capital allocation percentages,
    /// timestamp, and signal type.
    /// </summary>
    /// <param name="timestamp">The timestamp of the signal event.</param>
    /// <param name="signalType">The type of signal generated by the trading strategy.</param>
    /// <param name="strategy">The strategy instance to use for computing the position sizes.</param>
    /// <param name="historicalMarketData">A read-only dictionary containing the historical market data for the assets.</param>
    /// <param name="historicalFxConversionRates">A read-only dictionary containing the historical FX conversion rates.</param>
    /// <returns>A dictionary containing the position sizes for all assets in the strategy.</returns>
    IReadOnlyDictionary<Ticker, int> ComputePositionSizes(
        DateOnly timestamp,
        IReadOnlyDictionary<Ticker, SignalType> signalType,
        IStrategy strategy,
        IReadOnlyDictionary<DateOnly, SortedDictionary<Ticker, MarketData>?> historicalMarketData,
        IReadOnlyDictionary<DateOnly, SortedDictionary<CurrencyCode, decimal>> historicalFxConversionRates);
}
